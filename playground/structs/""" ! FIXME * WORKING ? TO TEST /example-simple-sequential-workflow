"""
* WORKING


What this script does:
This script demonstrates a simple sequential workflow with a human in the loop.
It uses the Swarms framework to create tasks and agents, and includes a step
where human input is required to proceed.

Requirements:
- Swarms framework installed
- OpenAI API key in your .env file

Note:
If you are running playground examples in the project files directly (without
swarms installed via PIP), make sure to add the project root to your PYTHONPATH
by running the following command in the project's root directory:
  'export PYTHONPATH=$(pwd):$PYTHONPATH'
"""

from swarms import Agent, Task
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

def get_openai_api_key() -> str:
    """
    Retrieve the OpenAI API key from environment variables.

    Returns:
        str: The OpenAI API key.

    Raises:
        ValueError: If the API key is not found in environment variables.
    """
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        raise ValueError("Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it.")
    return api_key

def create_documentation_sop() -> Task:
    """
    Create a Standard Operating Procedure for writing documentation.

    Returns:
        Task: An SOP for documentation tasks.
    """
    documentation_sop = Task(
        name="Documentation SOP",
        description="Guidelines for writing and reviewing documentation",
        steps=[
            "Draft the initial documentation",
            "Submit the draft for review",
            "Incorporate feedback from the reviewer",
            "Finalize the documentation",
            "Publish the final document"
        ]
    )
    return documentation_sop

def create_documentation_agent(sop: Task) -> Agent:
    """
    Create a documentation agent with a given SOP.

    Args:
        sop (Task): The SOP to be followed by the agent.

    Returns:
        Agent: A documentation agent configured with the given SOP.
    """
    agent = Agent(
        name="Doc_Agent_001",
        role="Documentation Specialist",
        goals=["Create high-quality documentation", "Incorporate reviewer feedback"],
        sop=sop
    )
    return agent

def handle_documentation_task(agent: Agent, task_description: str) -> str:
    """
    Handle a documentation task using an agent with an SOP.

    Args:
        agent (Agent): The documentation agent.
        task_description (str): The description of the task to be handled.

    Returns:
        str: The agent's response to the task.
    """
    task = Task(
        name="Handle Documentation Task",
        description="Complete a documentation task following the SOP",
        agent=agent,
        agent_prompt=(
            f"You are a {agent.role}. Follow your SOP to complete this task: "
            f"'{task_description}'"
        ),
        user_prompt=task_description
    )
    response = task.execute()
    return response

def main():
    # Get OpenAI API key
    try:
        api_key = get_openai_api_key()
    except ValueError as e:
        print(e)
        return

    # Create and demonstrate the use of an SOP
    documentation_sop = create_documentation_sop()
    doc_agent = create_documentation_agent(documentation_sop)

    print("Documentation Agent created with SOP:")
    print(f"Agent Name: {doc_agent.name}")
    print(f"Agent Role: {doc_agent.role}")
    print("SOP Steps:")
    for step in doc_agent.sop.steps:
        print(f"- {step}")

    # Handle a documentation task
    task_description = "Draft the initial documentation for the new feature."
    print(f"\nHandling documentation task: '{task_description}'")
    response = handle_documentation_task(doc_agent, task_description)
    print(f"Agent's response:\n{response}")

    # Human in the loop: Review and provide feedback
    human_feedback = input("Please review the draft and provide your feedback: ")
    print(f"\nHuman feedback: {human_feedback}")

    # Update the SOP to include the feedback step
    print("\nIncorporating feedback into the SOP:")
    doc_agent.sop.steps.insert(3, "Incorporate feedback from the reviewer")
    print("Updated SOP Steps:")
    for step in doc_agent.sop.steps:
        print(f"- {step}")

    # Handle another task with the updated SOP
    task_description = "Incorporate the feedback and finalize the documentation."
    print(f"\nHandling another task with updated SOP: '{task_description}'")
    response = handle_documentation_task(doc_agent, task_description)
    print(f"Agent's response:\n{response}")

if __name__ == "__main__":
    main()
